/*----------------------------------------------------
Copyright 2017 Xilinx, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------*/

#ifndef _XCHANGE_STRUCTS_HPP_
#define _XCHANGE_STRUCTS_HPP_

#include "hw_settings.h"

//# Index Pair for input and output dependencies
struct _indexpair
{
	short seqidx;
	short pos;
};
typedef struct _indexpair layerID;

//# Index Pair for input and output dependencies
struct _qformat
{
	int ip_bw;
	int ip_fbits;
	int op_bw;
	int op_fbits;
	int wt_bw;
	int wt_fbits;
	int bs_bw;
	int bs_fbits;
};
typedef struct _qformat qformat;

//# Layers supported
enum _kernel_type{
	CONV,
	POOL,
	FC_LAYER,
	SOFTMAX,
	DECONV,
	NORM,
	PERMUTE,
	NMS,
	CROP
};
typedef _kernel_type kernel_type_e;

//# Class to hold data required to schedule kernels
//# This will be filled by XChange Block from the data available in xLayer &
//# offsets generated by Buffer Management Block.
class xChangeLayer
{
public:
	kernel_type_e kernType;
	void * in_ptrs[INPUT_PORTS];
	void * out_ptrs[OUTPUT_PORTS];
	void * wts_ptrs[WEIGHT_PORTS];
	void * bias_ptr;
	void * params;
	void * mean;
	
	std::vector<void *> xtra_ptrs;
	
	std::vector<layerID> previous;
	std::vector<layerID> next;
	qformat qf_format;
	
	int resize_h;
	int resize_w;
	
	std::vector<float> float_params;
	std::vector<bool> layer_done;
	
	char *ref_path;
	char *out_path;
	char *base_path;

	//# Constructor
	xChangeLayer() {}
	xChangeLayer(kernel_type_e Type) 
	{
		kernType = Type;
	}

    //# Destructor
    ~xChangeLayer()
	{}

	//# Utils
	void DisplayParams(void);
	void DisplayParams(int);
};

struct _bufPtrs
{
	std::vector<void*> hwBufs;
	std::vector<void*> swBufs;
	int size;
};
typedef _bufPtrs bufPtrs;

#endif//_XCHANGE_STRUCTS_HPP_
